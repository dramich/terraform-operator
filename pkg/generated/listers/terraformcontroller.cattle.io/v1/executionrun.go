/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	v1 "github.com/rancher/terraform-controller/pkg/apis/terraformcontroller.cattle.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExecutionRunLister helps list ExecutionRuns.
type ExecutionRunLister interface {
	// List lists all ExecutionRuns in the indexer.
	List(selector labels.Selector) (ret []*v1.ExecutionRun, err error)
	// ExecutionRuns returns an object that can list and get ExecutionRuns.
	ExecutionRuns(namespace string) ExecutionRunNamespaceLister
	ExecutionRunListerExpansion
}

// executionRunLister implements the ExecutionRunLister interface.
type executionRunLister struct {
	indexer cache.Indexer
}

// NewExecutionRunLister returns a new ExecutionRunLister.
func NewExecutionRunLister(indexer cache.Indexer) ExecutionRunLister {
	return &executionRunLister{indexer: indexer}
}

// List lists all ExecutionRuns in the indexer.
func (s *executionRunLister) List(selector labels.Selector) (ret []*v1.ExecutionRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExecutionRun))
	})
	return ret, err
}

// ExecutionRuns returns an object that can list and get ExecutionRuns.
func (s *executionRunLister) ExecutionRuns(namespace string) ExecutionRunNamespaceLister {
	return executionRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExecutionRunNamespaceLister helps list and get ExecutionRuns.
type ExecutionRunNamespaceLister interface {
	// List lists all ExecutionRuns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ExecutionRun, err error)
	// Get retrieves the ExecutionRun from the indexer for a given namespace and name.
	Get(name string) (*v1.ExecutionRun, error)
	ExecutionRunNamespaceListerExpansion
}

// executionRunNamespaceLister implements the ExecutionRunNamespaceLister
// interface.
type executionRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExecutionRuns in the indexer for a given namespace.
func (s executionRunNamespaceLister) List(selector labels.Selector) (ret []*v1.ExecutionRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExecutionRun))
	})
	return ret, err
}

// Get retrieves the ExecutionRun from the indexer for a given namespace and name.
func (s executionRunNamespaceLister) Get(name string) (*v1.ExecutionRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("executionrun"), name)
	}
	return obj.(*v1.ExecutionRun), nil
}
